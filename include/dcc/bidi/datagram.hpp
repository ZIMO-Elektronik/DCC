// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// BiDi datagram
///
/// \file   dcc/bidi/datagram.hpp
/// \author Vincent Hamp
/// \date   12/02/2023

#pragma once

#include <static_math/static_math.h>
#include <algorithm>
#include <array>
#include <cassert>

namespace dcc::bidi {

namespace detail {

inline constexpr std::array<uint8_t, 64uz> encode_lut{
  0xACu, 0xAAu, 0xA9u, 0xA5u, 0xA3u, 0xA6u, 0x9Cu, 0x9Au, 0x99u, 0x95u, 0x93u,
  0x96u, 0x8Eu, 0x8Du, 0x8Bu, 0xB1u, 0xB2u, 0xB4u, 0xB8u, 0x74u, 0x72u, 0x6Cu,
  0x6Au, 0x69u, 0x65u, 0x63u, 0x66u, 0x5Cu, 0x5Au, 0x59u, 0x55u, 0x53u, 0x56u,
  0x4Eu, 0x4Du, 0x4Bu, 0x47u, 0x71u, 0xE8u, 0xE4u, 0xE2u, 0xD1u, 0xC9u, 0xC5u,
  0xD8u, 0xD4u, 0xD2u, 0xCAu, 0xC6u, 0xCCu, 0x78u, 0x17u, 0x1Bu, 0x1Du, 0x1Eu,
  0x2Eu, 0x36u, 0x3Au, 0x27u, 0x2Bu, 0x2Du, 0x35u, 0x39u, 0x33u};

inline constexpr std::array<uint8_t, 256uz> decode_lut{
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x33u, 0x00u, 0x00u, 0x00u, 0x34u, 0x00u, 0x35u, 0x36u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x3Au, 0x00u, 0x00u, 0x00u, 0x3Bu,
  0x00u, 0x3Cu, 0x37u, 0x00u, 0x00u, 0x00u, 0x00u, 0x3Fu, 0x00u, 0x3Du, 0x38u,
  0x00u, 0x00u, 0x3Eu, 0x39u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x24u, 0x00u, 0x00u, 0x00u, 0x23u, 0x00u,
  0x22u, 0x21u, 0x00u, 0x00u, 0x00u, 0x00u, 0x1Fu, 0x00u, 0x1Eu, 0x20u, 0x00u,
  0x00u, 0x1Du, 0x1Cu, 0x00u, 0x1Bu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x19u, 0x00u, 0x18u, 0x1Au, 0x00u, 0x00u, 0x17u, 0x16u, 0x00u, 0x15u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x25u, 0x14u, 0x00u, 0x13u, 0x00u, 0x00u, 0x00u, 0x32u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x0Eu, 0x00u, 0x0Du, 0x0Cu,
  0x00u, 0x00u, 0x00u, 0x00u, 0x0Au, 0x00u, 0x09u, 0x0Bu, 0x00u, 0x00u, 0x08u,
  0x07u, 0x00u, 0x06u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x04u, 0x00u,
  0x03u, 0x05u, 0x00u, 0x00u, 0x02u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x0Fu, 0x10u, 0x00u, 0x11u, 0x00u, 0x00u, 0x00u, 0x12u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x2Bu,
  0x30u, 0x00u, 0x00u, 0x2Au, 0x2Fu, 0x00u, 0x31u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x29u, 0x2Eu, 0x00u, 0x2Du, 0x00u, 0x00u, 0x00u, 0x2Cu, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x28u, 0x00u, 0x27u, 0x00u, 0x00u,
  0x00u, 0x26u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u};

} // namespace detail

/// Instruction understood and will be executed
///
/// For some stupid, incomprehensible reason, there are two versions of ACK.
inline constexpr std::array<uint8_t, 2uz> acks{0b0000'1111u, 0b1111'0000u};

/// Instruction received correctly but not supported
inline constexpr uint8_t nack{0b0011'1100u};

/// Enumeration to specify datagram bits
enum struct Bits { _12 = 12uz, _18 = 18uz, _24 = 24uz, _36 = 36uz, _48 = 48uz };

/// Convert datagram bits to size
///
/// \tparam I Datagram bits
template<Bits I>
inline constexpr auto datagram_size{(std::to_underlying(I) + 4uz) / 6uz};

template<size_t I = datagram_size<Bits::_48>>
using Datagram = std::array<uint8_t, I>;

/// Make datagram with ID
///
/// Currently supported datagrams are either
/// 12bit: ID[3-0]D[7-6]+D[5-0]
/// 18bit: ID[3-0]D[13-12]+D[11-6]+D[5-0]
/// 24bit: ID[3-0]D[19-18]+D[17-12]+D[11-6]+D[5-0]
/// 36bit: ID[3-0]D[31-30]+D[29-24]+D[23-18]+D[17-12]+D[11-6]+D[5-0]
/// 48bit: ID[3-0]D[43-42]+D[41-36]+D[35-30]+D[29-24]+D[23-18]+D[17-12]+D[11-6]
///        +D[5-0]
///
/// \tparam I     Datagram size in bits
/// \tparam T     Type of data
/// \param  id    ID
/// \param  data  Data
/// \return 12, 18, 24, 36 or 48bit datagram
template<Bits I, std::unsigned_integral T>
constexpr auto make_datagram(uint32_t id, T data) {
  Datagram<datagram_size<I>> datagram{};
  // Data must be smaller than the number of bits (-4 for ID)
  assert(data < smath::pow<uint64_t>(2u, datagram_size<I> * 6uz - 4uz));
  for (auto i{size(datagram) - 1u}; i > 0u; --i) {
    datagram[i] = data & 0x3Fu;
    data >>= 6u;
  }
  datagram.front() = static_cast<uint8_t>(id << 2u | (data & 0x03u));
  return datagram;
}

/// Make datagram without ID
///
/// \tparam I     Datagram size in bits
/// \tparam T     Type of data
/// \param  data  Data
/// \return 12, 18, 24, 36 or 48bit datagram
template<Bits I, std::unsigned_integral T>
constexpr auto make_datagram(T data) {
  Datagram<datagram_size<I>> datagram{};
  // Data must be smaller than the number of bits
  assert(data < smath::pow<uint64_t>(2u, datagram_size<I> * 6uz));
  for (auto i{size(datagram)}; i-- > 0u;) {
    datagram[i] = data & 0x3Fu;
    data >>= 6u;
  }
  return datagram;
}

/// Encode datagram
///
/// \tparam I         Size of array
/// \param  datagram  Datagram
/// \return Encoded datagram
template<size_t I>
constexpr auto encode_datagram(Datagram<I> const& datagram) {
  Datagram<I> encoded_datagram{};
  std::ranges::transform(datagram, begin(encoded_datagram), [](uint8_t b) {
    return detail::encode_lut[b];
  });
  return encoded_datagram;
}

/// Decode datagram
///
/// \tparam I                 Size of array
/// \param  encoded_datagram  Encoded datagram
/// \return Datagram
template<size_t I>
constexpr auto decode_datagram(Datagram<I> const& encoded_datagram) {
  Datagram<I> datagram{};
  std::ranges::transform(encoded_datagram, begin(datagram), [](uint8_t b) {
    return detail::decode_lut[b];
  });
  return datagram;
}

/// Make data
///
/// \tparam I         Size of array
/// \param  datagram  Datagram
/// \return Data
constexpr auto make_data(std::span<uint8_t const> datagram) {
  uint64_t data{};
  for (auto const b : datagram) {
    data <<= 6u;
    data |= b & 0x3Fu;
  }
  // Data must be smaller than the number of bits
  assert(data < smath::pow<uint64_t>(2u, size(datagram) * 6uz));
  return data;
}

} // namespace dcc::bidi
