// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// CRC8
///
/// \file   dcc/crc8.hpp
/// \author Vincent Hamp
/// \date   04/01/2022

#pragma once

#include <cstdint>
#include <numeric>
#include <span>

namespace dcc {

namespace detail {

inline constexpr std::array<uint8_t, 256uz> crc8_lut{
  0x00u, 0x5Eu, 0xBCu, 0xE2u, 0x61u, 0x3Fu, 0xDDu, 0x83u, 0xC2u, 0x9Cu, 0x7Eu,
  0x20u, 0xA3u, 0xFDu, 0x1Fu, 0x41u, 0x9Du, 0xC3u, 0x21u, 0x7Fu, 0xFCu, 0xA2u,
  0x40u, 0x1Eu, 0x5Fu, 0x01u, 0xE3u, 0xBDu, 0x3Eu, 0x60u, 0x82u, 0xDCu, 0x23u,
  0x7Du, 0x9Fu, 0xC1u, 0x42u, 0x1Cu, 0xFEu, 0xA0u, 0xE1u, 0xBFu, 0x5Du, 0x03u,
  0x80u, 0xDEu, 0x3Cu, 0x62u, 0xBEu, 0xE0u, 0x02u, 0x5Cu, 0xDFu, 0x81u, 0x63u,
  0x3Du, 0x7Cu, 0x22u, 0xC0u, 0x9Eu, 0x1Du, 0x43u, 0xA1u, 0xFFu, 0x46u, 0x18u,
  0xFAu, 0xA4u, 0x27u, 0x79u, 0x9Bu, 0xC5u, 0x84u, 0xDAu, 0x38u, 0x66u, 0xE5u,
  0xBBu, 0x59u, 0x07u, 0xDBu, 0x85u, 0x67u, 0x39u, 0xBAu, 0xE4u, 0x06u, 0x58u,
  0x19u, 0x47u, 0xA5u, 0xFBu, 0x78u, 0x26u, 0xC4u, 0x9Au, 0x65u, 0x3Bu, 0xD9u,
  0x87u, 0x04u, 0x5Au, 0xB8u, 0xE6u, 0xA7u, 0xF9u, 0x1Bu, 0x45u, 0xC6u, 0x98u,
  0x7Au, 0x24u, 0xF8u, 0xA6u, 0x44u, 0x1Au, 0x99u, 0xC7u, 0x25u, 0x7Bu, 0x3Au,
  0x64u, 0x86u, 0xD8u, 0x5Bu, 0x05u, 0xE7u, 0xB9u, 0x8Cu, 0xD2u, 0x30u, 0x6Eu,
  0xEDu, 0xB3u, 0x51u, 0x0Fu, 0x4Eu, 0x10u, 0xF2u, 0xACu, 0x2Fu, 0x71u, 0x93u,
  0xCDu, 0x11u, 0x4Fu, 0xADu, 0xF3u, 0x70u, 0x2Eu, 0xCCu, 0x92u, 0xD3u, 0x8Du,
  0x6Fu, 0x31u, 0xB2u, 0xECu, 0x0Eu, 0x50u, 0xAFu, 0xF1u, 0x13u, 0x4Du, 0xCEu,
  0x90u, 0x72u, 0x2Cu, 0x6Du, 0x33u, 0xD1u, 0x8Fu, 0x0Cu, 0x52u, 0xB0u, 0xEEu,
  0x32u, 0x6Cu, 0x8Eu, 0xD0u, 0x53u, 0x0Du, 0xEFu, 0xB1u, 0xF0u, 0xAEu, 0x4Cu,
  0x12u, 0x91u, 0xCFu, 0x2Du, 0x73u, 0xCAu, 0x94u, 0x76u, 0x28u, 0xABu, 0xF5u,
  0x17u, 0x49u, 0x08u, 0x56u, 0xB4u, 0xEAu, 0x69u, 0x37u, 0xD5u, 0x8Bu, 0x57u,
  0x09u, 0xEBu, 0xB5u, 0x36u, 0x68u, 0x8Au, 0xD4u, 0x95u, 0xCBu, 0x29u, 0x77u,
  0xF4u, 0xAAu, 0x48u, 0x16u, 0xE9u, 0xB7u, 0x55u, 0x0Bu, 0x88u, 0xD6u, 0x34u,
  0x6Au, 0x2Bu, 0x75u, 0x97u, 0xC9u, 0x4Au, 0x14u, 0xF6u, 0xA8u, 0x74u, 0x2Au,
  0xC8u, 0x96u, 0x15u, 0x4Bu, 0xA9u, 0xF7u, 0xB6u, 0xE8u, 0x0Au, 0x54u, 0xD7u,
  0x89u, 0x6Bu, 0x35u};

}  // namespace detail

/// This function calculates CRC8 (Dallas/Maxim). The polynomial representations
/// is 0x31.
///
/// \param  byte  Next byte for CRC calculation
/// \return CRC8
constexpr uint8_t crc8(uint8_t byte) { return detail::crc8_lut[byte]; }

/// This function calculates CRC8 (Dallas/Maxim). The polynomial representations
/// is 0x31.
///
/// \param  chunk Chunk to calculate CRC8 for
/// \return CRC8
constexpr uint8_t crc8(std::span<uint8_t const> chunk) {
  return std::accumulate(
    cbegin(chunk),
    cend(chunk),
    static_cast<uint8_t>(0u),
    [](uint8_t a, uint8_t b) { return crc8(static_cast<uint8_t>(a ^ b)); });
}

}  // namespace dcc